import themidibus.*;
float cc[] = new float[256];
MidiBus myBus;
Mover[] movers = new Mover[3000];
Attractor a;
Repulsor r;
float rx,ry,ax,ay;
void setup() {
  size(2700, 1800);
  background(255);

  MidiBus.list();
  myBus = new MidiBus(this, 0, 1);

  for (int i = 0; i < movers.length; i++) {
    movers[i] = new Mover(1, random(width), random(height));
  }
  a = new Attractor();
  r = new Repulsor();
}

void clear() {
background(255);
}

void draw() {
  if(cc[32]>0){
  clear();
  }
    if(cc[48]>0){
  setup();
  }
  if(cc[7]>0.5){
  fill(255,5);
  } else {
  fill(255,0);
  }
  rect(0,0,width,height);

  a.display();
  a.update();
  r.display();
  r.update();

  for (int i = 0; i < movers.length; i++) {
    PVector force = a.attract(movers[i]);
    movers[i].applyForce(force);
    PVector force2 = r.repulse(movers[i]);
    movers[i].applyForce2(force2);
    movers[i].update();
    movers[i].display();
  }
}

void controllerChange(int channel, int number, int value) {
  println(number);
  cc[number] = map(value, 0, 127, 0, 1);
}

void mousePressed() {
 saveFrame("nOc_exp_scrsht-####.png");
}
class Attractor {
  float osc;
  float a = 0;
  float aInc;
  float mass;
  float G;
  PVector location;
  PVector targetLoc;
  PVector velocity;
  PVector acceleration;
  float damping = 0.98;
  Attractor() {
    location = new PVector(width*1/3, height/2);
    velocity = new PVector();
    acceleration = new PVector();
    mass = 200;
    G = 1;
    ax = location.x;
    ay = location.x;
  } 
//33 49
  PVector attract(Mover m) {
    PVector force = PVector.sub(location, m.location);
    float d = force.mag();
    d = constrain(d, 5.0, 25.0);
    force.normalize();
    float strength = (G * mass * m.mass) / (d * d);
    force.mult(map(cc[18],0,1,-1,1)*strength);
    return force;
  }

  void display() {
    ellipseMode(CENTER);
    strokeWeight(1);
    stroke(map(cc[18],0,1,1,0)*255);
    fill(cc[18]*255);
    ellipse(location.x, location.y, mass/2, mass/2);
  }
  void update() {
    mass = 200* map(cos(a),-1,1,0,1);
    osc = cos(a);
    targetLoc = new PVector(cc[16]*width, map(cc[0],0,1,1,0)*height);
    acceleration = PVector.sub(targetLoc, location);
    acceleration.normalize();    
    velocity.add(acceleration);
    velocity.mult(damping);
    velocity.limit(6);
    location.add(velocity);
    acceleration.mult(0);
    aInc = cc[2];
    a+= aInc;
    if (location.x > width+40) {
      location.x = -40;
      //location.x = width;
      //velocity.x *= -1;
    } else if (location.x < -40) {
      location.x = width+40;
      //location.x = 0;
      //velocity.x *= -1;
    }

    if (location.y > height+40) {
      location.y = 0-40;
      //velocity.y *= -1;
      //location.y = height;
    } else if (location.y < 0-40) {
      location.y = height+40;
      //velocity.y *= -1;
      //location.y = 0;
    }
  }
}
class Mover {

  PVector location;
  PVector velocity;
  PVector acceleration;
  float mass;
  float dc;
  float damping = 0.98;
  Mover(float m, float x, float y) {
    mass = m;
    location = new PVector(x,y);
    velocity = new PVector();
    acceleration = new PVector();
  }

  void applyForce(PVector force) {
    PVector f = PVector.div(force, mass);
    acceleration.add(f);
  }
  void applyForce2(PVector force2) {
    PVector f = PVector.div(force2, mass);
    acceleration.add(f);
  }

  void update() {
    velocity.add(acceleration);
    velocity.mult(damping);
    location.add(velocity);
    velocity.limit(5);
    acceleration.mult(0);
    if (location.x > width) {
      //location.x = 0;
      location.x = width;
      velocity.x *= -1;
    } else if (location.x < 0) {
      //location.x = width;
      location.x = 0;
      velocity.x *= -1;
    }

    if (location.y > height) {
      //location.y = 0-40;
      velocity.y *= -1;
      location.y = height;
    } else if (location.y < 0) {
      //location.y = height+40;
      velocity.y *= -1;
      location.y = 0;
    
    }
  }

  void display() {
    stroke(0, 111);
    strokeWeight(1);
    float da = map(dist(location.x, location.y, ax, ay), 0, 1500, 255, 112);
    float dr = map(dist(location.x, location.y, rx, ry), 0, 1500, 255, 69);
    fill(dr, map(velocity.y, 0, 5, 255, 0), map(velocity.x, 0, 5, 255, 0));
    ellipse(location.x, location.y, mass*12, mass*12);
  }
}
class Repulsor {
  float osc;
  float a = 0;
  float aInc;
  float mass;
  float G;
  PVector location;
  PVector targetLoc;
  PVector velocity;
  PVector acceleration;
  float damping = 0.98;
  Repulsor() {
    location = new PVector(width*2/3, height/2);
    velocity = new PVector();
    acceleration = new PVector();
    G = 1;
    rx = location.x;
    ry = location.x;   
  }

  PVector repulse(Mover m) {
    PVector force2 = PVector.sub(location, m.location);
    float d = force2.mag();
    d = constrain(d, 5.0, 25.0);
    force2.normalize();
    float strength = (G * mass * m.mass) / (d * d);
    force2.mult(map(cc[19],0,1,-1,1)*strength);
    return force2;
  }

  void display() {
    ellipseMode(CENTER);
    strokeWeight(1);
    stroke(map(cc[19],0,1,1,0)*255);
    fill(cc[19]*255);
    ellipse(location.x, location.y, mass/2, mass/2);
  }
  void update() {
    mass = 200* map(cos(a),-1,1,0,1);
    osc = cos(a);
    targetLoc = new PVector(cc[17]*width, map(cc[1],0,1,1,0)*height);
    acceleration = PVector.sub(targetLoc, location);
    acceleration.normalize();    
    velocity.add(acceleration);
    velocity.mult(damping);
    velocity.limit(6);
    location.add(velocity);
    acceleration.mult(0);
    aInc = cc[3];
    a+= aInc;
    if (location.x > width+40) {
      location.x = -40;
      //location.x = width;
      //velocity.x *= -1;
    } else if (location.x < -40) {
      location.x = width+40;
      //location.x = 0;
      //velocity.x *= -1;
    }
    if (location.y > height+40) {
      location.y = 0-40;
      //velocity.y *= -1;
      //location.y = height;
    } else if (location.y < 0-40) {
      location.y = height+40;
      //velocity.y *= -1;
      //location.y = 0;
    }
  }
}
